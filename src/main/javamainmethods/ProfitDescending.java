package com1028_coursework;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.sql.Statement;

public class ProfitDescending {

	DatabaseConnection con = new DatabaseConnection();
	Connection databaseconnection = con.get_connection();

	Statement stmnt = null;
	ResultSet rs = null;

	/**
	 * From the requirements set; it is needed to "Compute the profit generated by
	 * each product line, sorted by profit descending". The profit can be retrieved
	 * by subtracting the buyPrice from the Manufacturer's Suggested Retail
	 * Price(MRSP). To sort this, we would then need to display in order from
	 * largest to smallest, the profits per product line.
	 */

	public List<Products> getProductlines() throws SQLException {
		ArrayList<Products> productlines = new ArrayList<Products>();
		try {
			Statement stmnt = databaseconnection.createStatement();
			ResultSet rs = stmnt.executeQuery("SELECT Products.productLine, SUM(Products.MSRP-Products.buyPrice) AS profit FROM Products GROUP BY productLine ORDER BY profit DESC");

			while (rs.next()) {
				double profit = rs.getDouble("profit");
				String productLine = rs.getString("productLine");
				productlines.add(new Products(null, null, null, null, null, productLine, 0, profit, 0));
			}

		} catch (SQLException e) {
			System.out.println("Unfortunately, the records could not be retrieved. Try again maybe?");
			throw new RuntimeException(e);
		}
		return productlines;

	}

	/** This method is used to show the profits by each product line. */

	public void DisplayProfitDescending() throws SQLException {
		List<Products> profit = getProductlines();
		Iterator<Products> iterate = profit.iterator();

		Products showthatobject;
		while (iterate.hasNext()) {
			showthatobject = iterate.next();
			System.out.println(
					"Product Line:  " + showthatobject.getProductLine() + " | Profit: " + showthatobject.getMSRP());

		}
	}
		/**After the sufficient data is retrieved, the connection is then terminated. */
		public void TerminateConnection() {

			try {
				if (this.stmnt != null) {
					this.stmnt.close();
				}
				if (this.databaseconnection != null) {
					this.databaseconnection.close();
				}
				System.out.println("Connection to the database has been closed. Thanks for checking in.");
			} catch (Exception e) {
				System.out.print("Hmm...it seems that the connection to the database failed to close...");
				throw new RuntimeException(e);
			}
		}

	}
		
				
